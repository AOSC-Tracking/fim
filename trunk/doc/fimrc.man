.\"
.\" $Id$
.\"
.TH fimrc 1 "(c) 2011-2011 Michele Martone"
.SH NAME
fimrc - \fB fim \fP configuration file and language reference

.SH SYNOPSIS
.B ~/.fimrc
.fi
.B /etc/fimrc
.fi
.B fim --script-from-stdin [ options ] < {scriptfile}
.fi
.B fim --execute-script {scriptfile} [ options ]
.fi
.B fim --execute-commands {commands} [ options ]
.fi
.B fim --final-commands {commands} [ options ]
.fi
.B fim --write-scriptout {scriptfile} [ options ]  
.fi
.B fim --write-scriptout /dev/stdout [ options ]
.fi

.SH DESCRIPTION
This page explains the 
.B fim
language, which is used for the 
.B fimrc
configuration files, {scriptfile}s, or {commands} passed via command line options.
This language can be used to issue commands (or programs) from the internal program command line accessed interactively through the ":" key.
The general form of a fim command/program is shown in the next section.


.SH FIM LANGUAGE GRAMMAR
This section specifies the grammar of the 
.B fim
language.

Language elements surrounded by a single quote ("'") are literals.

Warning: at the present state, this grammar has conflicts. A next release shall fix them.

  program:
         | statement_list

  statement_list: statement
                | statement ';' statement_list
                | non_atomic_statements_block statement_list
                | statements_block

  non_atomic_statements_block: '{' statement_list '}'
                             | INTEGER '{' statement_list '}'
                             | conditional_statement

  statements_block: atomic_statements_block
                  | non_atomic_statements_block

  conditional_statement: if_statement
                       | loop_statement

  if_statement: 'if' '(' expression ')' statements_block
              | 'if' '(' expression ')' statements_block 'else' statements_block

  loop_statement: 'while' '(' expression ')' statements_block
                | 'do' statements_block 'while' '(' expression ')'

  atomic_statements_block: statement ';'
                         | statement ';' ';'
                         | statement ';' ';' ';'

  statement: '!' arguments
           | INTEGER IDENTIFIER
           | SLASH_AND_REGEXP
           | '+' UNQUOTED_FLOAT '%'
           | '+' QUOTED_FLOAT '%'
           | '+' INTEGER '%'
           | '*' UNQUOTED_FLOAT
           | '*' QUOTED_FLOAT
           | '*' INTEGER
           | UNQUOTED_FLOAT '%'
           | QUOTED_FLOAT '%'
           | INTEGER '%'
           | '-' UNQUOTED_FLOAT '%'
           | '-' QUOTED_FLOAT '%'
           | '-' INTEGER '%'
           | INTEGER
           | IDENTIFIER
           | IDENTIFIER FILE_PATH
           | IDENTIFIER arguments
           | INTEGER IDENTIFIER arguments
           | IDENTIFIER '=' expression

  arguments: expression
           | expression arguments

  expression: '(' expression ')'
            | expression '.' expression
            | '!' expression
            | expression '%' expression
            | expression '+' expression
            | expression '-' expression
            | expression '*' expression
            | expression '/' expression
            | expression '<' expression
            | expression '>' expression
            | expression '||' expression
            | expression '&&' expression
            | expression '>=' expression
            | expression '<=' expression
            | expression '!=' expression
            | expression '==' expression
            | expression '=~' expression
            | '-' expression
            | IDENTIFIER
            | INTEGER
            | QUOTED_FLOAT
            | UNQUOTED_FLOAT
            | STRING

A STRING can be either a single quoted string or a double quoted string.
A FLOAT is a floating point number.
A QUOTED_FLOAT is a floating point number, either single ("'") or double (""") quoted.
An INTEGER shall be an unsigned integer number.
An IDENTIFIER shall be one of the valid fim commands (see 
.B COMMANDS REFERENCE
) or a valid alias.
A VARIABLE shall be an already declared or undeclared variable identifier (see 
.B VARIABLES REFERENCE
) or a valid alias, created using the 
.B alias
command.
The "=~" operator treats the right expression as a STRING, and uses is as a regular expression for matching purposes.
The SLASH_AND_REGEXP is a slash ("/") followed by a STRING, interpreted as a regular expression.
See regex(1) for regular expression syntax.

The way some one-line statements are evaluated:

.nf
:{number}       jump to {number}^th image in the list
:^	        jump to first image in the list
:$	        jump to last image in the list
:*{factor}      scale the image by {factor}
:{scale}%       scale the image to the desired {scale}
:+{scale}%       scale the image up to the desired percentage {scale} (relatively to the original)
:-{scale}%       scale the image down to the desired percentage {scale} (relatively to the original)

/regexp		 entering the pattern {regexp} (with /) makes fim jump to the next image whose filename matches {regexp}
/*.png$		 entering this pattern (with /) makes fim jump to the next image whose filename ends with 'png'
/png		 a shortcut for /.*png.*

!{cmd}		executes the {cmd} quoted string as a "/bin/sh" shell command


.SH COMMANDS REFERENCE
Incomplete section.

.B
prefetch
prefetches an image, for a faster subsequent opening
.fi
.B
no_image
displays no image at all (BROKEN)
.fi
.B
next
displays the next picture in the list
.fi
.B
next_picture
displays the next page or picture file
.fi
.B
prev_picture
displays the previous page or picture file
.fi
.B
prev
displays the previous picture in the list
.fi
.B
next_page
displays the next page
.fi
.B
prev_page
displays the previous page
.fi
.B
push
pushes a file in the files list
.fi
.B
display
displays the current file
.fi
.B
redisplay
re-displays the current file
.fi
.B
list
displays the files list
.fi
.B
pop
pop the last file from the files list
.fi
.B
file
displays the current file's name (UNFINISHED)
.fi
.B
pan_ne
pans the image north east
.fi
.B
pan_nw
pans the image north west
.fi
.B
pan_sw
pans the image south west
.fi
.B
pan_se
pans the image south east
.fi
.B
panup
pans the image up
.fi
.B
pandown
pans the image down
.fi
.B
panleft
pans the image left
.fi
.B
panright
pans the image right
.fi
.B
load
load the image, if not yet loaded
.fi
.B
reload
loads the image into memory
.fi
.B
files
displays the number of files in the file list
.fi
.B
sort
sorts the file list
.fi
.B
random_shuffle
randomly shuffles the file list
.fi
.B
reverse
reverses the file list
.fi
.B
remove
remove the current file or the selected ones from the list
.fi
.B
info
info about the current file
.fi
.B
regexp_goto
jumps to the first image matching the given pattern
.fi
.B
regexp_goto_next
jumps to the next image matching the last given pattern
.fi
.B
scale_increment
increments the scale by a percentual amount
.fi
.B
scale_multiply
multiplies the scale by the specified amount
.fi
.B
scale_factor_grow
multiply the scale factors reduce_factor and magnify_factor by scale_factor_multiplier
.fi
.B
scale_factor_shrink
divide the scale factors reduce_factor and magnify_facto by scale_factor_multiplier
.fi
.B
scale_factor_increase
add scale_factor_delta to the scale factors reduce_factor and magnify_facto
.fi
.B
scale_factor_decrease
subtract scale_factor_delta to the scale factors reduce_factor and magnify_factor
.fi
.B
rotate
rotate the image the specified amount of degrees
.fi
.B
magnify
magnify [ARGS] : magnifies the displayed image by the magnify_factor variable or ARGS
.fi
.B
reduce
reduce [ARGS] ; reduces the displayed image by reduce_factor or ARGS
.fi
.B
return
returns from the program with a status code
.fi
.B
align_top
aligns to the upper side the image
.fi
.B
align_bottom
aligns to the lower side the image
.fi
.B
goto
goes to the index image
.fi
.B
negate
negates the displayed image colors
.fi
.B
status
sets the status line to the collation of the given arguments
.fi
.B
scrolldown
scrolls down the image, going next if at bottom
.fi
.B
scrollforward
scrolls the image as it were reading it
.fi
.B
scale
scales the image according to a scale (ex.: 0.5,40%,..)
.fi
.B
set
manipulates the internal variables
.fi
.B
auto_scale
sets auto scale mode
.fi
.B
auto_width_scale
scale the image so that it fits horizontally in the screen
.fi
.B
auto_height_scale
scale the image so that it fits vertically in the screen
.fi
.B
bind
binds some keyboard shortcut to an action
.fi
.B
quit
terminates the program
.fi
.B
exec
executes script files
.fi
.B
echo
echoes its arguments
.fi
.B
if
if(expression){action;}[else{action;}]
.fi
.B
else
if(expression){action;}[else{action;}]
.fi
.B
while
while(expression){action;}
.fi
.B
alias
alias [ALIASNAME [ACTIONS [DESCRIPTION]]]
.fi
.B
getenv
getenv IDENTIFIER
.fi
.B
unalias
unalias {alias} | -a : deletes the alias {alias} or all aliases_ (use "-a", not -a)
.fi
.B
unbind
unbinds the action associated to KEYCODE
.fi
.B
sleep
sleeps for n (default 1) seconds
.fi
.B
mark
marks the current file
.fi
.B
help
provides online help
.fi
.B
autocmd
usage: autocmd [Event] [Pattern] [Commands]
.fi
.B
autocmd_del
usage: autocmd_del [Event] [Pattern] [Commands]
.fi
.B
set_interactive_mode
sets interactive mode
.fi
.B
set_console_mode
sets console mode
.fi
.B
system
system {expr}: get the output of the shell command {expr}. (uses popen()
.fi
.B
cd
cd {path}: change the current directory to {path}. cd - will change to the previous current directory (before the last ":cd {path} command")
.fi
.B
pwd
print the current directory name.
.fi
.B
popen
popen COMMAND: popen() invocation; spawns a shell, invoking COMMAND and executing as fim commands the output of COMMAND
.fi
.B
stdout
writes to stdout its arguments
.fi
.B
start_recording
starts recording of commands
.fi
.B
stop_recording
stops recording of commands
.fi
.B
dump_record_buffer
dumps on screen record buffer
.fi
.B
execute_record_buffer
executes the record buffer
.fi
.B
eval
evaluates the arguments as commands, executing them.
.fi
.B
repeat_last
repeats the last action
.fi
.B
variables
displays the associated variables
.fi
.B
commands
displays the existing commands
.fi
.B
dump_key_codes
dumps the active key codes
.fi
.B
clear
clears the virtual console
.fi
.SH VARIABLES REFERENCE
If undeclared, a variable will evaluate to 0.
In the following, the [internal] variables are the ones referenced in the source code (not including the hardcoded configuration, which may be inspected and/or invalidated by the user at runtime).

.B
FIM_DEFAULT_CONFIG_FILE_CONTENTS
[internal,out] the contents of the default (hardcoded) configuration file
.fi
.B
_TERM
[internal,out] the environment TERM variable
.fi
.B
_autocmd_trace_stack
[internal] dump to stdout autocommands stack trace during their execution (for debugging purposes)
.fi
.B
_cache_status
[internal,out] current information on cache status
.fi
.B
_cached_images
[internal,out] the number of images currently cached
.fi
.B
_debug_commands
[internal] each executed command (for debugging purposes)
.fi
.B
_device_string
[internal,out] the current device string
.fi
.B
_display_as_binary
[internal,in] if nonzero, will force loading of the specified files as pixelmaps (no image decoding will be performed); if 1, using one bit per pixel;  if 24, using 24 bits per pixel; otherwise will load and decode the files as usual
.fi
.B
_display_busy
[internal,in]if 1, will display a message on the status bar when processing
.fi
.B
_display_console
[internal,in] if 1, will display the output console
.fi
.B
_display_status
[internal,in] if 1, will display the status bar
.fi
.B
_display_status_bar
[internal,in] if 1, will display the status bar
.fi
.B
_do_sanity_check
[internal,in,experimental] if 1, will execute a sanity check on startup
.fi
.B
_fim_bpp
[internal,out] the bits per pixel count
.fi
.B
_fim_scriptout_file
[internal,in] the name of the file to write to when recording sessions
.fi
.B
_last_system_output
[internal,out,experimental] the standard output of the last call to the system command
.fi
.B
_load_default_etc_fimrc
[internal,in] if 1 at startup, will load /etc/fimrc, or equivalent system startup file
.fi
.B
_load_fim_history
[internal,in] if 1 on startup, will load the ~/fim_history file on startup
.fi
.B
_max_cached_images
[internal,in] the maximum number of images allowed in the cache
.fi
.B
_max_cached_memory
[internal,in] the maximum amount of memory allowed for the cache
.fi
.B
_max_iterated_commands
[internal,experimental] the iteration limit for N in "N[commandname]" iterated command invocations
.fi
.B
_no_default_configuration
[internal,in]
.fi
.B
_no_rc_file
[internal,in] if not 0, the ~/.fimrc file will not be loaded at startup
.fi
.B
_open_offset
[internal] offset used when opening files
.fi
.B
_override_display
[internal,undocumented]
.fi
.B
_save_fim_history
[internal,in] if 1 on exit, will save the ~/fim_history file on exit
.fi
.B
_seek_magic
[internal] will seek for a magic signature before opening a file (for now, use like this: fim -c '_seek_magic=MAGIC_STRING;push file_to_seek_in.ext' ) 
.fi
.B
_status_line
[internal,in] if 1, will display the status bar
.fi
.B
_verbose_errors
[internal,in,undocumented]
.fi
.B
_verbose_keys
[internal,in,undocumented]
.fi
.B
_want_prefetch
[internal,in] if 1, will prefetch further files just after display of the first file
.fi
.B
angle
[internal,undocumented]
.fi
.B
ascale
[internal,in]the asymmetric scaling of the current image
.fi
.B
auto_scale_v
[experimental, undocumented]
.fi
.B
autoflip
[internal,undocumented]
.fi
.B
automirror
[internal,undocumented]
.fi
.B
autonegate
[internal,undocumented]
.fi
.B
autotop
[internal,in] if 1, will align to the top freshly loaded images
.fi
.B
autowidth
[internal,in] if 1, will scale freshly loaded images to fit width
.fi
.B
comment
[internal,out] the image comment, stored in the image file
.fi
.B
console_buffer_free
[internal,in,undocumented]
.fi
.B
console_buffer_total
[internal,in,undocumented]
.fi
.B
console_buffer_used
[internal,in,undocumented]
.fi
.B
console_key
[internal,in] the key binding for spawning the command line [internal]
.fi
.B
console_lines
[internal,in,undocumented]
.fi
.B
console_offset
[internal,in,undocumented]
.fi
.B
fileindex
[internal,out] the current image numeric index
.fi
.B
filelistlen
[internal,out] the length of the current image list
.fi
.B
filename
[internal,out] the current file name
.fi
.B
flipped
[internal,undocumented]
.fi
.B
fresh
[internal,in,out,experimental] 1 if the image was loaded, before all autocommands execution
.fi
.B
height
[internal,out] the current image original height
.fi
.B
ignorecase
[internal,in] if 1, will allow for case insensitive regexp searches
.fi
.B
lwidth
[internal,in,undocumented]
.fi
.B
magnify_factor
[internal,in] the image scale multiplier used when magnifying images size
.fi
.B
mirrored
[internal,undocumented]
.fi
.B
negated
[internal,undocumented]
.fi
.B
orientation
[internal,undocumented]
.fi
.B
pwd
[internal,out] the current working directory
.fi
.B
reduce_factor
[internal,in] the image scale multiplier used when reducing images size
.fi
.B
rows
[internal,in,undocumented]
.fi
.B
scale
[internal,in]the scale of the current image
.fi
.B
scale_factor_delta
[internal,undocumented]
.fi
.B
scale_factor_multiplier
[internal,undocumented]
.fi
.B
screen_height
[internal,out] the screen height
.fi
.B
screen_width
[internal,out] the screen width
.fi
.B
sheight
[internal,out] the current image scaled height
.fi
.B
steps
[internal,in] the steps, in pixels, when panning images
.fi
.B
swidth
[internal,out] the current image scaled width
.fi
.B
want_autocenter
[internal,undocumented]
.fi
.B
width
[internal,out] the current image original width
.fi
.SH EXAMPLES
.nf
# jump to the third image:
3;
# jump to first image:
^;
# jump to last image:
$;
# magnify the image two times:
*2;
# scale the image to the 30% of the original:
30%;
# scale the image up by 30%:
+30%;
# scale the image down by 30%:
-30%;
# jump to the next image whose filename matches the ".*jpg" regular expression:
/.*jpg;
# executes the "date" system command
!"date";

.SH NOTES
This manual page is incomplete: a number of topics, as type conversions, or operator precedence is left unspecified.
Also a formal description of the various one-line commands, as well as an extensive example list is needed.
.SH SEE ALSO
fim(1), regex(1).
.SH AUTHOR
Michele Martone <dezperado _CUT_ autistici _CUT_ org>
.SH COPYRIGHT
See fim(1).


