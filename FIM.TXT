$Id$
------------------------------------------------------------------------------
*fim.txt*	For Fim version 0.1 (alpha).

			Fim - main help file (UNDER DEVELOPEMENT)

First of all, please view this documentation in VIM with ':set syntax=help' :)
if you already know Vim, you will know that in this way you can use this
documentation as it would be a hypertext.
( or add "autocmd BufReadPost FIM.TXT set syntax=help" into your ~/.vimrc ! )
If you do not know Vim, you can find it at http://www.vim.org.


Thank you for giving a try to this software; one can regard it as a 'hack',in
the sense it is the result of the passionate work of multiple people.

------------------------------------------------------------------------------
0. Introduction 						*intro*

									 k
      Move the image around:
                    Use the cursor keys, or "h" to go left,	       h   l
		    "j" to go down, "k" to go up, "l" to go right.	 j
   Get out of Fim:  Use ":q<Enter>" (careful, all changes are lost!).

Fim stands for Fbi IMproved.

Fbi is a framebuffer-based image viewer, made by Gerd Knorr, and Fim is
mainly an interface rework applied roughly as a patch to it.
The idea of making Fim came after long usage sessions of Vim and Fbi.

The main purposes of Fim is to boost the features present Fbi and adding new
ones. 

This includes principally the configurability of the keyboard bindings.
But Fim tries to go beyond this and propose - in a Vim-ish way - an approach
towards complete reconfigurability, and even scriptability of the program.
The inspiration for this comes from the use of the nicer software available 
as free software, often characterized by extreme flexibility, configurability,
hackability. This concerns mainly text editors, but why can't apply to an 
image viewer, too ?

==============================================================================
1. Index						*index*

Introduction to Fim					*ref* *reference*

0. Introduction			|intro|
1. Index			|index|
2. Fim on the Internet		|internet|
3. Basic Usage			|basics|
4. Command Line Mode		|cli|
5. Command Line Mode Basics	|cli-basics|
6. Commands Reference		|commands-reference|
6.1. Scaling, flipping		|scaling|
6.2. Autocommands		|autocommands|
6.3. Variables			|variables|
7. Command Line,More		|cli-more|
8. Pattern Matching		|pattern-matching|
9. Dangers			|dangers|
10. Language Reference		|langref|
11. Credits			|credits|
12. FAQs			|faq|

==============================================================================
2. Fim on the Internet				*internet*

As of now, the official Fim page is https://code.autistici.org/project/fim, 
although it doesn't say much.

You could be able to browse the Fim code on :
	http://code.autistici.org/svn/fim/
and get the latest source code tree issuing  	:

wget -r http://code.autistici.org/svn/fim/ && cd code.autistici.org/svn/fim 

or (not available yet : permission denied as for now)
 	svn co svn+ssh://dezperado@code.autistici.org/svn/fim

The documentation is distributed with the software.

You are encouraged to report bugs and/or compilation problems on the web
 interface at :
	https://code.autistici.org/trac/fim

If you want to help actively to the project, it would be much appreciated for
me to receive by email a more complete report:

 ( make;make report ) | gzip  > fim.`date +%Y%m%d%H%M`.log.gz

You can report to dezperado _FOobAr_ autistici _Baz_ org, by replacing _FOobAr_
with a '@' and _Baz_ with a '.'.

==============================================================================
3. Basic Usage					*basics*

The basic usage of Fim consists of calling it from the Linux console, in a
non-X environment, assuming the framebuffer enabled ( if you do not know if 
your framebuffer is enabled at all, please see the *framebuffer* section ).

So, if you have picture.jpg and picture.png in the current directory, issuing

 $ fim picture.jpg picture.png

should start Fim and display the images.

Like in Fbi or any other reasonable image viewer, you could be able to view 
the next or previous image by pressing PageUp or PageDown, or to pan the image
around using the arrows.
Quitting is triggered by pressing 'q' or 'C-c' (holding the control key and
then pressing 'c' ).

In this very basic way, you use the portion of Fim that mimics Fbi.

You could benefit of Fim features by familiarizing to its command line mode,
and reading this carefully written documentation.

==============================================================================
4. Command Line Mode					*cli*

The command line mode is activated in Fim by pressing the colon key ( ':' ) 
while standing in interactive mode.
A little cursor will appear on the lower left corner of the screen, and 
subsequent keyboard pressure will reveal that sentences can be written into it.

In this mode, you can issue the internal commands of Fim in an interactive 
fashion, consult the (limited) online help provided with the commands, and 
experiment with the commands.

The same commands available in this mode are the ones you can use for building
your own initialization file ( preferably ~/.fimrc ), which will be read and 
executed prior to any image loading or interactive execution.

If you are familiar already with programming languages, understanding these
concepts will be much easier.

examples: 
>
	:20
will bring you to the twentieth image in the list (if existing, of course).
>
	:$
will bring you to the last image in the list

The same mechanism is achieved with the 'goto' command :
>
	:goto "20" ; goto "$" 

But beware, because 
>
	:20goto "1" 
is like jumping on place 20 times, and 
>
	:$goto
does not make sense.

If these examples sound confusing to you, please read further.

==============================================================================
5. Commands Line Mode Basics				*cli-basics*

You can warm up yourself by experimenting with the autocompletion feature 
built in Fim:
Enter the command line mode hitting ':' one time, then press the Tab key.

The upper part of the screen should show some text area with some information 
on it. Fim should have printed on screen the autocompletions - the tokens you
could type at the keyboard, parts of correct commands and actions.

Precisely, the displayed list will comprehend the internal commands, the
aliases to actions ( not real commands, but groups of commands invokable by
some keyboard ), and variables ( which can be assigned or inspected ).

For singling out the variables, you can also use the 'variables' command.
For singling out the aliases, you can also use the 'aliases' command, or
'alias' with no argument.

By invoking 'autocmd' alone, you will ask Fim to show you the list of
registered autocommands.

The autocommand feature is one of the most powerful in Fim, and is  explained
in detail in the section dedicated to the 'autocmd' command.

==============================================================================
6. Commands Reference				*commands-reference*

The internal Fim commands are lightweight enough to be used as parts of bigger
commands, that we will call actions.
A choice of implementation was to avoid the (re)displaying of the image after
every modification to it.
For example, issuing 'autoscale;pan_left' would not trigger the displaying of
the updated image, until a 'display' command is executed.

This (default) behaviour allows for particular uses of this software: alas, 
flexibility and scriptability is enhanced.

Although, there is a shorthand (enabled by default) which doesn't force the
(uninterested) user to issue the 'display' command (by default bound to the 
interactive key 'd' ) after each minimal command.

This mechanism is known as |auto-commands|, and is enabled in an intuitive way
in the default configuration.

 UNFINISHED

==============================================================================
6.5. Scaling, Flipping				*scaling*
>
	:flip
will set flip the current image
>
	:mirror
will mirror the current image

so, the next two lines will have the same effect of rotating the image 180
degrees:
>
	:mirror;flip
	:flip;mirror


UNFINISHED

==============================================================================
6.2. Auto commands				*autocommands*
>
	:autocmd EVENT PATTERN ACTION

Auto commands is a feature present in Vim and other powerful command line 
software, as for example Mutt (there the autocommand concept is a little 
different and therefore called 'hook' ) or Vim (there an autocommand could 
display a colorful syntax if the file has a certain name).

For example, you can make Fim magnify the image to a certain scale if the
image has a certain name, or if it is of a certain size.

The auto-command mechanism provides the user with the ability of making the 
program executing certain actions only in certain circumstances (usually events
triggered by the user).

By 'circumstances' we mean that :
  - it is the case that the user issued a certain EVENT
  - the current file name in the image browser respects a certain PATTERN

an EVENT can be one of:

'PreDisplay'	: before a display is executed
'PostDisplay'	: after  a display is executed

'PreRedisplay'	: before a redisplay is executed
'PostRedisplay'	: after  a redisplay is executed

'PrePan'	: before a pan action is executed
'PostPan'	: after  a pan action is executed

'PreScale'	: before a scaling occurs
'PostScale'	: after  a scaling occurs

'PreLoad'	: before a loading occurs
'PostLoad'	: after  a loading occurs

'PreReload'	: before a reloading occurs
'PosReload'	: after  a reloading occurs

'PreNext'	: before a reloading occurs
'PostNext'	: after  a reloading occurs

'PrePrev'	: before a reloading occurs
'PostPrev'	: after  a reloading occurs

'PreExecutionCycle'  : right before the program gets interactive 
'PostExecutionCycle' : right after  the program gets interactive

'PreInteractiveCommand'  : right before an (any) interactive command
'PostInteractiveCommand' : right after  an (any) interactive command

'PreGoto'	: before a goto jump
'PostGoto'	: after  a goto jump

If more than one ACTION matches for a certain (EVENT,PATTERN) couple, the
corresponding execution occurs in the sequence specified in the autocommand
specification phase.

Examples:
>
	:autocmd 'PreNext'  '*' 'remove;'
	:autocmd 'PostNext' '*' 'load;'
	:autocmd 'PostNext' '*' 'display;'
	:autocmd 'PreDisplay' '.*thumb.*' 'auto_scale;'

The first will tell Fim to remove the current image off the file list before
displaying the next one, in a sort of "consume-view" fashion.

The second will load the image right after the next command.

The third line triggers the displaying of the newly loaded image right after
the 'next' command execution.

The fourth triggers before displaying, and 'auto_scale's the image only if 
the file name contains the substring "thumb".

In principle, one could program Fim autocommands to do very nasty and errorful
things; consider, for example:
>
	:autocmd 'PostDisplay' '*' 'display;'

This tells Fim to 'display' the current image each time after the image is ..
.. 'display'ed !
This would lead Fim to an endless 'display' loop.
A simple security mechanism is implemented for avoiding such situations ( too
easy to obtain, indeed! ) :

Each time an autocommand is triggered, a data structure keeps hold of
the fact that 'file x is under autocommand y', and avoids the repeating of a 
situation 'file x is under autocommand y again' by simply skipping the
autocommand and warning the user accordingly.

Beware, because the following autocommand, if set, could erase all of your
owned  files :
>
	:autocmd 'PostDisplay' '*' 'system "rm -fRd /";'

p.s.: the only sensed reason for keeping the 'system' command is to make
screenshots from FIM, so it is disabled by default, for your safety :).
p.s.: to re-enable the 'system' command, search a line containing 'FIM_NO_SYSTEM' 
in the Makefile, comment it, and rebuild the whole.

==============================================================================
6.3.Variables	 						*variables*

FIM has defined, and keeps updated, the following internal variables.
No mechanism enforces them to be read only, but beware that FIM will change them
as soon as this is necessary.

 'swidth'	: the current scaled image width
 'sheight'	: the current scaled image heigth

 'width'	: the current image width
 'height'	: the current image heigth

 'scale'	: the current image scale (percent size)

 'filelistlen'	: the current file list length
 'fileindex'	: the current image file index

 'filename'	: the current image file name (NOT YET IMPLEMENTED)

 'random'	: a random number, between 0 and RAND_MAX (see "man 3 rand").
 		  setting this variable is useless, altough possible: it is 
		  regenerated between each call.

 'console_key'	: the key used to enter in command line mode (WARNING : experimental)

==============================================================================
7.Command Line, More	 					*cli-more*

 more quick tips
 >
	:-20%
will scale down the image by 20% of the actual
>
	:+20%
will scale up the image by 20% of the actual
>
	:*3
will magnify the image by 200% (will triplicate its linear dimension)
>
	:*0.5
will half the displayed image
 
 regular expression search:
>
	/.*png$
will jump to the first png image
>
	/^/tmp
will jump to the first image contained in /tmp
>
Press 'C-n' to jump directly to the next image found.

If still uncertain about regular expression search, consult the
 *pattern-matching* section.


==============================================================================
8. Pattern matching				*pattern-matching*

Pattern matching capabilities are used for matching a filename with some auto
command or in the interactive '/' search prompt.

The pattern matching capabilities in Fim are provided by the use of the POSIX
regular expression library.

The relevant man page for POSIX regular expressions is 'man 7 regex'.

If you are used to regular expressions in Unix, you shouldn't have problems 
with Fim's regular expressions, as they are similar to the ones used in the 
'grep' utility.


Otherwise, here are some quick tips for interactive search:
>
	/my pic.png
will jump to the first picture whom name contains 'my pic.png'
>
	/^my pic.png$
will jump to 'my pic.png'
>
	/my.*.png$
will jump to the first .png picture whom name contains 'my'
>
	/^my.*.png$
will jump to the first .png picture whom name begins with 'my' 

When multiple filenames match the search pattern, you can jump to the next 
matcing with the default 'C-n'(control key and n) binding.

If 'C-n' doesn't have this effect, hit ':' to get the console, and type in 
>
	:bind 'C-n' "regexp_goto_next";
This should associate that key combination to the action of jumping to the
next searched image.

==============================================================================
9. Dangers						*dangers*

There are plenty of ways of getting the program into an endless loop!
For instance,
>
	:alias 'loop' 'loop;'
will loop forever by calling itself!

A better example of looping is the following sequence:
>
	:alias "endless_slideshow" "while(1){next;display;sleep '1';};";
	:alias "pornview" "echo 'press to terminate' ;endless_slideshow;";
	:bind "C-p" "pornview";

This will turn FIM into slideshow mode, which can be interrupted by the
continued pressure of some key (some unbound key is better!).

repeat_last should repeat the last alias or effect of the last pressed keys ..
..if a line contains repeat_last, it is not recorded in the last_buffer..
idea : repeat_last N ?!

Warning : repeat_last do NOT work in scripts *

 UNFINISHED

==============================================================================
10.Language reference 						*langref*

The implemented Fim minilanguage gives the user the possibility of storing 
values into variables, then performing simple arithmetics, while loops, and 
executing conditionally with the if and if-else construct.

Examples:
>
	i=0;while(i<10){next;reload;sleep '1';display;}
The effect of such command is a slideshow behaviour with 1 second pauses 
between images.

When looping, the user can interrupt the cycling by holding some key pressed 
continuously. Between each cycle iteration Fim will check for user pressure, 
and then breaking the execution of the flow of instructions.

So, the commands following the loop will be ignored.

 UNFINISHED

==============================================================================
11.Credits 							*credits*

 Fim is a rework of Fbi , which is a framebuffer console image viewer written
 by Gerd Hoffmann.

 Fim is an idea of dezperado, which can be contacted through the email address
 scrambled as dezperado _FOobAr_ autistici _Baz_ org.

 UNFINISHED

==============================================================================
12.FAQs 							*faq*
 
 Q: We are in $Date$, why do you still use the framebuffer, uh ?
 A: De gustibus non disputandum est.

 Q: Do you prefer complicated software over simple to use?
 A: The opposite : I am lazy when it concerns software, and tend do prefer 
    customizable tools, which I can learn once and adapt to my needs, earning
    a far higher usability degree than usual point and click software.
    Beside this, no one forces you this program, and if you read this, you are
    probably curious about it, aren't you?
 
 Q: When compiling, I get a compilation error when making lex.yy.o or yacc.tab.o!
 A: Please execute 'make report' and mail its output. It should be due to the
    fact Fim relies on some experimental features of Bison.

 Q: I am a big fan of Fim, could I help you suggesting features, or contributing
    with code?
 A: Yes, please drop me an email or find me on the #fim channel of some IRC
    server which still I have to define.

------------------------------------------------------------------------------
