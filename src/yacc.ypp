/* $Id$ */
/*
 yacc.ypp : Parser source file template

 (c) 2007 Michele Martone

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
*/

/*
	20070924
	This grammar file is messed up.
	It needs a solid revision to avoid conflits and introduce a slight tolerance
	to expressions with excessive semicolons and such things.

	Moreover, a solid revision will bring in a better C++ integration
	and clean up well the interpreter.cpp file, too.
*/

%{

#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include "common.h"
#include "lex.h"
#include "fim.h"

#define  yylex lexer->yylex

/* prototypes */
nodeType *opr(int oper, int nops, ...);
nodeType *fid(float f);
nodeType *con(int value);
nodeType *fcon(float fValue);
nodeType *scon(char* s);
nodeType *xscon(char*s);
nodeType *vscon(char*s,int typeHint);
void freeNode(nodeType *p);
int ex(nodeType *p);
//int yylex(void);

void yyerror(char *s);
//int sym[26]; /* symbol table */

%}

%union {
	int   iValue; /* integer value */
	float fValue; /* float   value */
	char  cIndex; /* command table index :) */
	char* sValue;
	nodeType *nPtr; /* node pointer */
};
//	float fValue; /* integer value */

%token <iValue> INTEGER
//%token <sValue> PIPE
%token <sValue> STRING
%token <sValue> REGEXP
%token <fValue> FLOAT
%token <sValue> IDENTIFIER
//%token <sValue> NEWLINE
%token <sValue> COMMAND		//unimplemented yet
%token WHILE IF DO PRINT ELSE SYSTEM AND OR NOT
//%nonassoc IFX
//%nonassoc FI
//%nonassoc ELSE
//%left '$'
//lower priority
%left ';'
%nonassoc '}' '{'
%left OR
%left AND 
%left GE LE EQ NE '>' '<'
%left '.'
%nonassoc '(' ')'
%left '%'
%left '+'
%left '-'
%left '*' '/'
%left NOT
%nonassoc UMINUS
//higher priority
%type <nPtr> stmt expr stmt_list stmt_block args arg

%%

program:
	//function { ; /*exit(0);*/ }
//	func_dec { ; }
	stmt_list { ex($1); freeNode($1); }
	;

//func_dec:
//	"function"  IDENTIFIER '(' /*TODO: ARG_DECS */ ')'  { ; }
//	;


//function:
	//function stmt { ex($2); freeNode($2); }
	//function stmt_list { ex($2); freeNode($2); }
//	function stmt{ ex($2); freeNode($2); }
//	| /* NULL */
//	;

stmt:
//	PRINT expr { $$ = opr(PRINT, 1, $2); }

//	   SYSTEM args        { $$ = opr('x',2,scon(dupstr("system")),$2); }
	   NOT args        { $$ = opr('x',2,scon(dupstr("system")),$2); }
//	| '!' args { $$ = opr('x',2,scon("echo"),$2);  }
//	| PRINT STRING { $$ = opr(PRINT, 1, scon($2)); }
//	| PRINT args { $$ = opr('x',2,scon(dupstr("echo")),$2);  } //candidate for deletion
//	| STRING { $$ = scon($1); }
//	| IDENTIFIER { $$ = xscon($1); }
	| INTEGER IDENTIFIER { if($1>0){$$ = opr('r',2,opr('x',1,scon($2)),con($1)); }}
	| IDENTIFIER      { $$ = opr('x',1,scon($1));     }
//	| INTEGER         { $$ = opr('x',2,scon(dupstr("echo")),opr('a',1,opr('a',1,dupstr("\"ciao\"")))); }
//	| INTEGER         { $$ = opr('x',2,scon(dupstr("goto")),opr('a',1,opr('a',1,scon(dupnstr(3))))); }
//	| INTEGER         { $$ = opr('x',2,scon(dupstr("echo")),opr('a',1,opr('a',1,scon(dupstr("ciao"))))); }
	| REGEXP { $$ = opr('x',2,scon(dupstr("regexp_goto")),opr('a',1,opr('a',1,scon($1)))); }
	| '+' FLOAT   '%' { $$ = opr('x',2,scon(dupstr("scale_increment")),opr('a',1,opr('a',1,scon(dupnstr(((double)$2)/100.0f))))); }
	| '+' INTEGER '%' { $$ = opr('x',2,scon(dupstr("scale_increment")),opr('a',1,opr('a',1,scon(dupnstr(((double)$2)/100.0f))))); }
	| '*' FLOAT   { $$ = opr('x',2,scon(dupstr("scale_multiply")),opr('a',1,opr('a',1,scon(dupnstr(((double)$2)))))); }
	| '*' INTEGER { $$ = opr('x',2,scon(dupstr("scale_multiply")),opr('a',1,opr('a',1,scon(dupnstr(((double)$2)))))); }
	| FLOAT  '%'{if($1>0.0){$$=opr('x',2,scon(dupstr("scale")),opr('a',1,opr('a',1,scon(dupnstr(((double)$1)/100.0f)))));}else { $$ = opr('x',2,scon(dupstr("scale_increment")),opr('a',1,opr('a',1,scon(dupnstr(((double)$1)/100.0f))))); } }
	| INTEGER'%'{{$$=opr('x',2,scon(dupstr("scale")),opr('a',1,opr('a',1,scon(dupnstr(((double)$1)/100.0f)))));}}
	| '-' FLOAT   '%' { $$ = opr('x',2,scon(dupstr("scale_increment")),opr('a',1,opr('a',1,scon(dupnstr(-((double)$2)/100.0f))))); }
	| '-' INTEGER '%' { $$ = opr('x',2,scon(dupstr("scale_increment")),opr('a',1,opr('a',1,scon(dupnstr(-((double)$2)/100.0f))))); }
	| INTEGER         { $$ = opr('x',2,scon(dupstr("goto")),opr('a',1,opr('a',1,scon(dupnstr($1))))); }
//	| expr { $$ = opr(PRINT, 1, $1); }
//	| '$'             { $$ = opr('x',2,scon(dupstr("goto")),opr('a',1,opr('a',1,scon(dupnstr($1))))); }
//	| '^'             { $$ = opr('x',2,scon(dupstr("goto")),opr('a',1,opr('a',1,scon(dupnstr($1))))); }
	| IDENTIFIER args { $$ = opr('x',2,scon($1),$2);  }
	| INTEGER IDENTIFIER args { if($1>0){$$ = opr('r',2,opr('x',2,scon($2),$3),con($1)); }}
//	| IDENTIFIER '=' expr  { $$ = opr('=', 2, vscon($1,'i'), $3); }
	| IDENTIFIER '=' FLOAT { $$ = opr('=', 2, vscon($1,'f'), fcon($3)); }
//	| IDENTIFIER '=' STRING{ $$ = opr('=', 2, vscon($1,'s'), scon($3)); }
	| IDENTIFIER '=' arg { $$ = opr('=', 2, vscon($1,'a'), $3); }
//	| NEWLINE { /* this still doesn't work as we would like to */ }
	| stmt ';' { $$ = $1; } // new
	;

args:
	arg { $$ = opr('a',1, $1 ); }
	| arg args { $$ = opr('a', 2, $1, $2); }
	;
arg:
	  expr { $$ = opr('a',1,  $1 ); }
	| STRING   { $$ = opr('a', 1, scon($1)); }
//	| INTEGER  { $$ = opr('a', 1, scon($1)); }
	| IDENTIFIER { $$ = vscon($1,'v');  } //necessary conflict
	| arg '.' arg { $$ = opr('.', 2, $1, $3); }
//	| arg '.' arg { $$ = opr('a',1,opr('.', 2, $1, $3)); }
//	| '(' expr ')'  { $$ = opr('a',1,  $2 ); }
	;

stmt_block:
	'{' stmt_list '}' { $$ = opr(';', 2, $2, NULL); }
//	| INTEGER '{' stmt_list '}' { $$ =          opr(';', 2, opr('r',2,opr('x',1,scon($3)),con($1)), NULL); } //BAD
	| INTEGER '{' stmt_list '}' { if($1>0){$$ = opr('r',2,opr(';', 2, $3, NULL) ,con($1)); }}
//	| '{' stmt_list '}'INTEGER { if($4>0){$$ = opr('r',2,opr(';', 2, $2, NULL) ,con($4)); }}
//	| '[' INTEGER ']' '{' stmt_list '}' { if($2>0){$$ = opr('r',2,opr(';', 2, $5, NULL) ,con($2)); }}
	| stmt ';' { $$ = opr(';', 2, $1, NULL); }
	| WHILE '(' expr ')' stmt_block { $$ = opr(WHILE, 2, $3, $5); }
	| DO stmt_block WHILE '(' expr ')' { $$ = opr(WHILE, 2, $5, $2); }
	| IF '(' expr ')' stmt_block { $$ = opr(IF, 2, $3, $5); }
	| IF '(' expr ')' '{' stmt_list '}' ELSE stmt_block { $$ = opr(IF, 3, $3, $6, $9); }
//	| IF '(' expr ')' stmt_block ELSE stmt_block { $$ = opr(IF, 3, $3, $5, $7); } //<- causes shift-reduce conflict..
	;
	

stmt_list:
	stmt { $$ = $1; }
//	| stmt ';' { $$ = $1; }
//	| stmt ';' stmt_list { $$ = opr(';', 2, $1, $3); }
	| stmt_block stmt_list{ $$ = opr(';', 2, $1, $2); }
	| stmt_block { $$ = $1; }
	;
expr:
	INTEGER { $$ = con($1);}
	//  INTEGER { $$ = opr('+', 2, con($1), con(0)); }
	| IDENTIFIER { $$ = vscon($1,'v');  }
	| NOT expr { $$ = opr('!', 1, $2); }
	| expr '%' expr { $$ = opr('%', 2, $1, $3); }
	| expr '+' expr { $$ = opr('+', 2, $1, $3); }
	| expr '-' expr { $$ = opr('-', 2, $1, $3); }
	| expr '*' expr { $$ = opr('*', 2, $1, $3); }
	| expr '/' expr { $$ = opr('/', 2, $1, $3); }
	| expr '<' expr { $$ = opr('<', 2, $1, $3); }
	| expr '>' expr { $$ = opr('>', 2, $1, $3); }
	| expr OR expr  { $$ = opr( OR , 2, $1, $3); }
	| expr AND expr { $$ = opr( AND, 2, $1, $3); }
	| expr GE expr { $$ = opr(GE, 2, $1, $3); }
	| expr LE expr { $$ = opr(LE, 2, $1, $3); }
	| expr NE expr { $$ = opr(NE, 2, $1, $3); }
	| expr EQ expr { $$ = opr(EQ, 2, $1, $3); }
//	| '-' expr %prec UMINUS { $$ = opr(UMINUS, 1, $2); } //conflicts
	| '-' expr %prec UMINUS { $$ = opr('-', 2, con(0), $2); }
	| '(' expr ')' { $$ = $2; }
//	| '`' IDENTIFIER '`' { $$ = opr('x',1,scon($2)); }
;

%%
#define SIZEOF_NODETYPE ((char *)&p->con - (char *)p)

/*
 * string constant handling
 */
nodeType *scon(char*s)
{
	if(s==NULL)yyerror("TOKEN NULL!\n");
//	printf("identifier : \"%s\" (%d)\n",s,(int)s);
	//LEAKAGE PROBLEMS WITH DESTRUCTION! OKKIO!
	nodeType *p;
	size_t nodeSize;
	/* allocate node */
	nodeSize = SIZEOF_NODETYPE + sizeof(stringNodeType);
	if ((p =(nodeType*) malloc(nodeSize)) == NULL)
		yyerror("out of memory");
	/* copy information */
	p->type = stringCon; 
	//if((p->scon.s = (char*)calloc(1+strlen(s),1))==NULL) yyerror("out of memory");
	//strcpy(p->scon.s,s); //OKKIO 
	p->scon.s=s;
//	printf("identifier : \"%s\"\n",p->scon.s);
	return p;
}
nodeType *xscon(char*s)
{
	nodeType *p=scon(s);
	if(p)p->type = cmdId; 
	return p;
}

nodeType *vscon(char*s,int typeHint)
{
#ifdef FIM_RANDOM
	if( *(int*)(s+0) == 0x646e6172 // dnar
	&& (*(int*)(s+4)<<8)== 0x006d6f00    ) // dnar
	return con(fim_rand());
#endif
	nodeType *p=scon(s);
	if(p)p->type = vId; 
	if(p)p->typeHint = typeHint; 
	return p;
}


nodeType *fcon(float fValue)
{
	nodeType *p;
	size_t nodeSize;
	/* allocate node */
	nodeSize = SIZEOF_NODETYPE + sizeof(fidNodeType);
	if ((p =(nodeType*) malloc(nodeSize)) == NULL)
	yyerror("out of memory");
	/* copy information */
	p->type = floatCon;
	p->fid.f = fValue;
	return p;
}



nodeType *con(int value)
{
	nodeType *p;
	size_t nodeSize;
	/* allocate node */
	nodeSize = SIZEOF_NODETYPE + sizeof(conNodeType);
	if ((p =(nodeType*) malloc(nodeSize)) == NULL)
	yyerror("out of memory");
	/* copy information */
	p->type = intCon;
	p->con.value = value;
	return p;
}




nodeType *opr(int oper, int nops, ...)
{
	va_list ap;
	nodeType *p;
	size_t nodeSize;
	int i;
	/* allocate node */
	nodeSize = SIZEOF_NODETYPE + sizeof(oprNodeType) +
	(nops - 1) * sizeof(nodeType*);
	if ((p =(nodeType*) malloc(nodeSize)) == NULL)
	yyerror("out of memory");
	/* copy information */
	p->type = typeOpr;
	p->opr.oper = oper;
	p->opr.nops = nops;
	va_start(ap, nops);
	for (i = 0; i < nops; i++)
	p->opr.op[i] = va_arg(ap, nodeType*);
	va_end(ap);
	return p;
}

void freeNode(nodeType *p)
{
	int i;
	if (!p) return;
	if (p->type == stringCon)
		free(p->scon.s);
	if (p->type == typeOpr)
	{
		for (i = 0; i < p->opr.nops; i++)
		freeNode(p->opr.op[i]);
	}
	free (p);
}

void yyerror(char *s)
{
	//fprintf(stdout, "%s \n", s);
}


